package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"yougile_bot4/internal/api"
	"yougile_bot4/internal/metrics"
	"yougile_bot4/internal/models"
	"yougile_bot4/internal/storage"

	"gopkg.in/telebot.v3"
)

// –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
var (
	mainMenu   = &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnHelp    = mainMenu.Text("‚ùì –ü–æ–º–æ—â—å")
	btnAddress = mainMenu.Text("üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
	btnNewTask = mainMenu.Text("üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
	btnFAQ     = mainMenu.Text("‚ÑπÔ∏è –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	adminMenu  = &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnApprove = adminMenu.Text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
	btnReject  = adminMenu.Text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")

	// –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
	commentMenu = &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnSkip     = commentMenu.Text("‚è≠ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
)

// –ò—Å–ø–æ–ª—å–∑—É–µ–º TaskCreationState –∏–∑ models

// RegistrationState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
type RegistrationState struct {
	StartTime time.Time
	User      *models.User
	Stage     string // "waiting_firstname", "waiting_lastname", "waiting_building", "waiting_room"
}

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	bot                *telebot.Bot
	storage            *storage.Storage
	yougileClient      *api.Client
	boardID            int64
	regTimeout         time.Duration
	minMsgLen          int
	notifications      chan string
	metrics            *metrics.Metrics                 // –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
	regStates          map[int64]*RegistrationState     // –∫–ª—é—á - TelegramID
	addressChange      map[int64]string                 // —ç—Ç–∞–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: "building" –∏–ª–∏ "room"
	taskCreationStates map[int64]*models.TaskCreationState     // —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
	commentStates      map[int64]int64                  // –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: –∫–ª—é—á - TelegramID, –∑–Ω–∞—á–µ–Ω–∏–µ - TaskID
	timeStates         map[int64]int64                  // –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: –∫–ª—é—á - TelegramID, –∑–Ω–∞—á–µ–Ω–∏–µ - TaskID
	pendingReqs        map[int64]*models.PendingRequest // –∑–∞–ø—Ä–æ—Å—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	adminActions       map[int64]*AdminAction           // —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	adminUserStates    map[int64]*AdminUserState        // —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(token string, storage *storage.Storage, yougileToken string, boardID int64, regTimeout time.Duration, minMsgLen int, metrics *metrics.Metrics) (*Bot, error) {
	b, err := telebot.NewBot(telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %w", err)
	}

	yougileClient := api.NewClient(yougileToken, strconv.FormatInt(boardID, 10), 30*time.Second, metrics)

	bot := &Bot{
		bot:                b,
		storage:            storage,
		yougileClient:      yougileClient,
		boardID:            boardID,
		regTimeout:         regTimeout,
		minMsgLen:          minMsgLen,
		notifications:      make(chan string, 100),
		metrics:            metrics,
		regStates:          make(map[int64]*RegistrationState),
		addressChange:      make(map[int64]string),
		pendingReqs:        make(map[int64]*models.PendingRequest),
		adminActions:       make(map[int64]*AdminAction),
		taskCreationStates: make(map[int64]*models.TaskCreationState),
		commentStates:      make(map[int64]int64),
		timeStates:         make(map[int64]int64),
		adminUserStates:    make(map[int64]*AdminUserState),
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
	mainMenu.Reply(
		mainMenu.Row(btnNewTask),
		mainMenu.Row(btnHelp, btnAddress),
		mainMenu.Row(btnFAQ),
	)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	adminMenu.Reply(
		adminMenu.Row(btnApprove, btnReject),
	)

	bot.setupHandlers()
	return bot, nil
}

// setupHandlers –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func (b *Bot) setupHandlers() {
	// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	b.bot.Handle("/start", b.handleStart)
	b.bot.Handle("/help", b.handleHelp)
	b.bot.Handle("/address", b.handleChangeAddress)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
	b.bot.Handle(&btnHelp, b.handleHelp)
	b.bot.Handle(&btnAddress, b.handleChangeAddress)
	b.bot.Handle(&btnApprove, b.handleApprove)
	b.bot.Handle(&btnReject, b.handleReject)
	b.bot.Handle(&btnFAQ, b.handleFAQ)

	// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	b.bot.Handle("/admin", b.handleAdminActions)
	b.bot.Handle("/promote_admin", b.handlePromoteAdmin)
	b.bot.Handle("/demote_admin", b.handleDemoteAdmin)
	b.bot.Handle("/list_users", b.handleListUsers)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
	b.bot.Handle(&btnPromoteAdmin, b.handlePromoteAdminButton)
	b.bot.Handle(&btnDemoteAdmin, b.handleDemoteAdminButton)
	b.bot.Handle(&btnEditRole, b.handleEditRole)
	b.bot.Handle(&btnEditAddress, b.handleEditAddress)
	b.bot.Handle(&btnEditName, b.handleEditName)
	b.bot.Handle(&btnBack, b.handleListUsers)

	// Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	b.bot.Handle(telebot.OnCallback, func(c telebot.Context) error {
		if c.Callback().Unique == "faq" {
			return b.handleFAQCallback(c)
		}

		if strings.HasPrefix(c.Callback().Data, "task_step|") {
			return b.handleTaskStepCallback(c)
		}

		if strings.HasPrefix(c.Callback().Data, "task_select|") {
			return b.handleTaskSelectCallback(c)
		}

		switch c.Callback().Data {
		case "select_user":
			return b.handleSelectUser(c)
		case "make_admin":
			return b.handlePromoteAdmin(c)
		case "make_user":
			return b.handleDemoteAdmin(c)
		}
		return nil
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á
	b.bot.Handle(&btnNewTask, b.handleTaskConstructor) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
	b.bot.Handle(&btnSkip, b.handleSkip)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	b.bot.Handle(telebot.OnText, b.handleMessage)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
	b.bot.Handle(telebot.OnPhoto, b.handlePhoto)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
	b.bot.Handle(telebot.OnDocument, b.handleDocument)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if user, exists := b.storage.GetUser(c.Sender().ID); exists {
		if user.Approved {
			return c.Send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", mainMenu)
		} else {
			return c.Send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
	isFirstUser := !b.storage.HasAdmins()

	user := &models.User{
		TelegramID: c.Sender().ID,
		Role:       models.RoleUser, // –†–æ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ AddUser, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		Approved:   false,
		Username:   c.Sender().Username, // –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	}

	b.regStates[c.Sender().ID] = &RegistrationState{
		StartTime: time.Now(),
		User:      user,
		Stage:     "waiting_firstname",
	}

	if isFirstUser {
		return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
	}
	return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(c telebot.Context) error {
	user, exists := b.storage.GetUser(c.Sender().ID)
	if !exists {
		return c.Send(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
	}

	var menu interface{} = mainMenu
	if user.Role == models.RoleAdmin {
		menu = adminMenu
	}

	return c.Send(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/address - –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –∞–¥—Ä–µ—Å`, menu)
}

// handleChangeAddress –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
func (b *Bot) handleChangeAddress(c telebot.Context) error {
	user, exists := b.storage.GetUser(c.Sender().ID)
	if !exists {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
	}

	if !user.Approved {
		return c.Send("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
	}

	if user.AddressChange {
		return c.Send("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	b.addressChange[c.Sender().ID] = "building"
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 1).")
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å
	if stage, isChangingAddress := b.addressChange[c.Sender().ID]; isChangingAddress {
		input := strings.TrimSpace(c.Text())
		user, exists := b.storage.GetUser(c.Sender().ID)
		if !exists {
			delete(b.addressChange, c.Sender().ID)
			return c.Send("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}

		switch stage {
		case "building":
			if len(input) < 5 {
				return c.Send("–ê–¥—Ä–µ—Å –∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å.")
			}
			user.BuildingAddress = input
			b.addressChange[c.Sender().ID] = "room"
			return c.Send("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞.")

		case "room":
			if len(input) < 1 {
				return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞.")
			}
			user.RoomNumber = input
			user.AddressChange = true // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			b.storage.UpdateUser(user)
			if err := b.storage.SaveData(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
			}

			delete(b.addressChange, c.Sender().ID)
			return c.Send("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		}
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if regState, ok := b.regStates[c.Sender().ID]; ok {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		if time.Since(regState.StartTime) > b.regTimeout {
			delete(b.regStates, c.Sender().ID)
			return c.Send("–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.")
		}

		switch regState.Stage {
		case "waiting_firstname":
			firstname := strings.TrimSpace(c.Text())
			if len(firstname) < 2 {
				return c.Send("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			}
			regState.User.FirstName = firstname
			regState.Stage = "waiting_lastname"
			return c.Send("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")

		case "waiting_lastname":
			lastname := strings.TrimSpace(c.Text())
			if len(lastname) < 2 {
				return c.Send("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			}
			regState.User.LastName = lastname
			regState.Stage = "waiting_building"
			return c.Send("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 1).")

		case "waiting_building":
			building := strings.TrimSpace(c.Text())
			if len(building) < 5 {
				return c.Send("–ê–¥—Ä–µ—Å –∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å.")
			}
			regState.User.BuildingAddress = building
			regState.Stage = "waiting_room"
			return c.Send("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞.")

		case "waiting_room":
			room := strings.TrimSpace(c.Text())
			if len(room) < 1 {
				return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞.")
			}
			regState.User.RoomNumber = room
			regState.Stage = "waiting_position"
			return c.Send("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.")

		case "waiting_position":
			position := strings.TrimSpace(c.Text())
			if len(position) < 2 {
				return c.Send("–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			}
			regState.User.Position = position
			b.storage.AddUser(regState.User)
			if err := b.storage.SaveData(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
			}
			delete(b.regStates, c.Sender().ID)
			return c.Send("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		}
	}

	// –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	user, exists := b.storage.GetUser(c.Sender().ID)
	if !exists {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
	}

	if !user.Approved {
		return c.Send("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if adminAction, ok := b.adminActions[c.Sender().ID]; ok && adminAction.Stage == "waiting_input" {
		if time.Since(adminAction.StartTime) > 5*time.Minute {
			delete(b.adminActions, c.Sender().ID)
			return c.Send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
		}

		input := strings.TrimSpace(c.Text())
		var targetID int64
		if strings.HasPrefix(input, "@") {
			username := strings.TrimPrefix(input, "@")
			targetID = b.storage.GetUserIDByUsername(username)
			if targetID == 0 {
				return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
			}
		} else {
			var err error
			targetID, err = strconv.ParseInt(input, 10, 64)
			if err != nil {
				return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
			}
		}

		targetUser, exists := b.storage.GetUser(targetID)
		if !exists {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		switch adminAction.Action {
		case "promote":
			if targetUser.Role == models.RoleAdmin {
				return c.Send(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
					targetUser.FirstName, targetUser.LastName))
			}
			targetUser.Role = models.RoleAdmin
			b.storage.UpdateUser(targetUser)
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", targetUser.TelegramID)

			if err := b.storage.SaveData(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
				return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
			}

			b.bot.Send(&telebot.User{ID: targetID}, "–í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
			delete(b.adminActions, c.Sender().ID)
			return c.Send(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
				targetUser.FirstName, targetUser.LastName))

		case "demote":
			if targetUser.Role != models.RoleAdmin {
				return c.Send(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
					targetUser.FirstName, targetUser.LastName))
			}
			targetUser.Role = models.RoleUser
			b.storage.UpdateUser(targetUser)
			log.Printf("–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", targetUser.TelegramID)

			if err := b.storage.SaveData(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
				return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
			}

			b.bot.Send(&telebot.User{ID: targetID}, "–° –≤–∞—Å –±—ã–ª–∏ —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
			delete(b.adminActions, c.Sender().ID)
			return c.Send(fmt.Sprintf("–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s %s —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
				targetUser.FirstName, targetUser.LastName))
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
	if _, ok := b.taskCreationStates[c.Sender().ID]; ok {
		return b.handleTaskText(c)
	}

	return nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	go func() {
		for msg := range b.notifications {
			b.SendNotification(msg)
		}
	}()

	go b.bot.Start()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Stop() {
	close(b.notifications)
	b.bot.Stop()
}

// SendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (b *Bot) SendNotification(msg string) {
	for _, chatID := range b.storage.GetChatIDs() {
		if _, err := b.bot.Send(&telebot.Chat{ID: chatID}, msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç %d: %v", chatID, err)
		}
	}
}

// showPendingRequests –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
func (b *Bot) showPendingRequests(c telebot.Context) error {
	var menu *telebot.ReplyMarkup
	var buttons []telebot.Btn
	var msg string

	for _, req := range b.pendingReqs {
		user, exists := b.storage.GetUser(req.UserID)
		if !exists {
			continue
		}

		var reqType string
		switch req.Type {
		case "registration":
			reqType = "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
		case "address_change":
			reqType = "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"
		}

		msg += fmt.Sprintf("\nüë§ %s %s (%d)\nüìù –¢–∏–ø: %s\nüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: %s\n",
			user.FirstName, user.LastName, user.TelegramID, reqType, user.Position)

		if req.Type == "address_change" {
			msg += fmt.Sprintf("üè¢ –ê–¥—Ä–µ—Å: %s\nüö™ –ö–∞–±–∏–Ω–µ—Ç: %s\n",
				req.BuildingAddress, req.RoomNumber)
		}

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		menu = &telebot.ReplyMarkup{}
		btnApprove := menu.Data("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å "+strconv.FormatInt(req.UserID, 10), "approve|"+strconv.FormatInt(req.UserID, 10))
		btnReject := menu.Data("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å "+strconv.FormatInt(req.UserID, 10), "reject|"+strconv.FormatInt(req.UserID, 10))
		buttons = append(buttons, btnApprove, btnReject)
	}

	if len(msg) == 0 {
		return c.Send("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	menu.Inline(
		menu.Row(buttons...),
	)

	return c.Send("üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:"+msg, menu)
}

// handleApprove –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
func (b *Bot) handleApprove(c telebot.Context) error {
	admin, exists := b.storage.GetUser(c.Sender().ID)
	if !exists || admin.Role != models.RoleAdmin {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ callback
	if c.Callback() != nil && c.Callback().Data != "" {
		// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
		parts := strings.Split(c.Callback().Data, "|")
		if len(parts) != 2 || parts[0] != "approve" {
			return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.")
		}

		userID, err := strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
		}

		req, exists := b.pendingReqs[userID]
		if !exists {
			return c.Send("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		user, exists := b.storage.GetUser(userID)
		if !exists {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		switch req.Type {
		case "registration":
			user.Approved = true
		case "address_change":
			user.BuildingAddress = req.BuildingAddress
			user.RoomNumber = req.RoomNumber
			user.AddressChange = false
		}

		b.storage.UpdateUser(user)
		delete(b.pendingReqs, userID)

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		msg := "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
		if req.Type == "registration" {
			msg = "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
		} else {
			msg = "–í–∞—à –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."
		}
		b.bot.Send(&telebot.User{ID: userID}, msg)

		return c.Send("–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	return b.showPendingRequests(c)
}

// handleReject –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
func (b *Bot) handleReject(c telebot.Context) error {
	admin, exists := b.storage.GetUser(c.Sender().ID)
	if !exists || admin.Role != models.RoleAdmin {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ callback
	if c.Callback() != nil && c.Callback().Data != "" {
		// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
		parts := strings.Split(c.Callback().Data, "|")
		if len(parts) != 2 || parts[0] != "reject" {
			return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.")
		}

		userID, err := strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
		}

		req, exists := b.pendingReqs[userID]
		if !exists {
			return c.Send("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		user, exists := b.storage.GetUser(userID)
		if !exists {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}

		switch req.Type {
		case "registration":
			// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
			delete(b.storage.GetUsers(), userID)
		case "address_change":
			user.AddressChange = false
			b.storage.UpdateUser(user)
		}

		delete(b.pendingReqs, userID)

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		msg := "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
		if req.Type == "registration" {
			msg = "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
		} else {
			msg = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
		}
		b.bot.Send(&telebot.User{ID: userID}, msg)

		return c.Send("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	return b.showPendingRequests(c)
}

// NotificationChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (b *Bot) NotificationChannel() chan<- string {
	return b.notifications
}

// handleDocument –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
func (b *Bot) handleDocument(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	_, exists := b.storage.GetUser(c.Sender().ID)
	if !exists {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	if _, ok := b.commentStates[c.Sender().ID]; ok {
		delete(b.commentStates, c.Sender().ID)
		return c.Send("‚ö†Ô∏è –ö –∑–∞–¥–∞—á–∞–º –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã, " +
			"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é.")
	}

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
}
