// Package bot —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª–∏.
package bot

import (
	"fmt"
	"strconv"
	"time"

	"yougile_bot4/internal/models"

	"gopkg.in/telebot.v3"
)

// –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
var (
	userManageMenu = &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnEditRole    = userManageMenu.Text("üëë –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")
	btnEditAddress = userManageMenu.Text("üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
	btnEditName    = userManageMenu.Text("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
	btnBack        = userManageMenu.Text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

// AdminUserState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
type AdminUserState struct {
	UserID    int64
	Action    string // "edit_role", "edit_address", "edit_name"
	Stage     string // "waiting_building", "waiting_room", "waiting_firstname", "waiting_lastname"
	StartTime time.Time
}

// handleListUsers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
func (b *Bot) handleListUsers(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	admin, exists := b.storage.GetUser(c.Sender().ID)
	if !exists || admin.Role != models.RoleAdmin {
		return c.Send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users := b.storage.GetAllUsers()
	if len(users) == 0 {
		return c.Send("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	menu := &telebot.ReplyMarkup{}
	menu.Inline()

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var rows []telebot.Row
	for _, user := range users {
		roleIcon := "üë§"
		if user.Role == models.RoleAdmin {
			roleIcon = "üëë"
		}
		btn := menu.Data(
			fmt.Sprintf("%s %s %s (%s)", roleIcon, user.FirstName, user.LastName, user.Position),
			"select_user",
			fmt.Sprint(user.TelegramID),
		)
		rows = append(rows, menu.Row(btn))
	}
	menu.Inline(rows...)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", menu)
}

// handleSelectUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
func (b *Bot) handleSelectUser(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	admin, exists := b.storage.GetUser(c.Sender().ID)
	if !exists || admin.Role != models.RoleAdmin {
		return c.Send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
	}

	userID := c.Callback().Data
	user, exists := b.storage.GetUser(stringToInt64(userID))
	if !exists {
		return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	b.adminUserStates[c.Sender().ID] = &AdminUserState{
		UserID:    user.TelegramID,
		StartTime: time.Now(),
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	msg := fmt.Sprintf("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"+
		"–ò–º—è: %s\n"+
		"–§–∞–º–∏–ª–∏—è: %s\n"+
		"–î–æ–ª–∂–Ω–æ—Å—Ç—å: %s\n"+
		"–ê–¥—Ä–µ—Å: %s, –ø–æ–º–µ—â–µ–Ω–∏–µ %s\n"+
		"–†–æ–ª—å: %s\n"+
		"–°—Ç–∞—Ç—É—Å: %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		user.FirstName,
		user.LastName,
		user.Position,
		user.BuildingAddress,
		user.RoomNumber,
		user.Role,
		getApprovalStatus(user.Approved))

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	userManageMenu.Reply(
		userManageMenu.Row(btnEditRole),
		userManageMenu.Row(btnEditAddress, btnEditName),
		userManageMenu.Row(btnBack),
	)

	return c.Edit(msg, userManageMenu)
}

// handleEditRole –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) handleEditRole(c telebot.Context) error {
	state, exists := b.adminUserStates[c.Sender().ID]
	if !exists {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /list_users")
	}

	user, exists := b.storage.GetUser(state.UserID)
	if !exists {
		return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
	menu := &telebot.ReplyMarkup{}
	menu.Inline()

	btnMakeAdmin := menu.Data("üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", "make_admin", fmt.Sprint(user.TelegramID))
	btnMakeUser := menu.Data("üë§ –°–¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "make_user", fmt.Sprint(user.TelegramID))

	if user.Role == models.RoleAdmin {
		menu.Inline(menu.Row(btnMakeUser))
	} else {
		menu.Inline(menu.Row(btnMakeAdmin))
	}

	return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", menu)
}

// handleEditAddress –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
func (b *Bot) handleEditAddress(c telebot.Context) error {
	state, exists := b.adminUserStates[c.Sender().ID]
	if !exists {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /list_users")
	}

	state.Action = "edit_address"
	state.Stage = "waiting_building"

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∑–¥–∞–Ω–∏—è:")
}

// handleEditName –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
func (b *Bot) handleEditName(c telebot.Context) error {
	state, exists := b.adminUserStates[c.Sender().ID]
	if !exists {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /list_users")
	}

	state.Action = "edit_name"
	state.Stage = "waiting_firstname"

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
}

// getApprovalStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getApprovalStatus(approved bool) string {
	if approved {
		return "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
	}
	return "‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
}

// stringToInt64 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ int64
func stringToInt64(s string) int64 {
	i, _ := strconv.ParseInt(s, 10, 64)
	return i
}
